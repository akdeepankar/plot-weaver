// Client-side localization with fallback translations
// For now, we'll use hardcoded translations until the API is set up

// Define the content that needs to be localized
export const LOCALIZATION_CONTENT = {
  // Quiz content
  quiz: {
    title: "üé≠ PlotWeaver",
    welcome: "Welcome to your personalized story experience!",
    description: "Let's discover your reading personality to create stories that resonate with you. Take a quick 5-question quiz to unlock personalized storytelling.",
    startQuiz: "Start Quiz ‚Üí",
    personalityQuiz: "Personality Quiz",
    helpText: "Help us understand your reading preferences to personalize your stories.",
    questionOf: "Question {current} of {total}",
    settingUp: "Setting things up...",
    preparing: "Preparing your personalized experience",
  },
  
  // Story content
  story: {
    chooseStory: "Choose a Story",
    selectStoryline: "Select a storyline from the sidebar to begin your adventure",
    startYourOwnStory: "‚ú® Start Your Own Story",
    yourStoryIdea: "Your Story Idea",
    describeStory: "Describe your story idea here...",
    startStory: "Start Story",
    clickToBegin: "Click \"Start Story\" to begin",
    emojisOn: "üòä Emojis On",
    emojisOff: "üòê Emojis Off",
    continueStory: "Continue Story ‚Üí",
    generating: "Generating...",
    previous: "‚Üê Previous",
    next: "Next ‚Üí",
  },
  
  // Navigation and UI
  navigation: {
    navigation: "Navigation",
    progress: "Progress",
    paragraphOf: "Paragraph {current} of {total}",
    whatHappensNext: "What happens next?",
    selectOptionContinue: "Select an option, then click \"Continue Story\" to proceed",
  },
  
  // Story starters
  storyStarters: {
    title: "Story Starters",
    lostCityAtlantis: "Lost City of Atlantis",
    spaceColonyExodus: "Space Colony Exodus",
    timeTravelerDilemma: "Time Traveler's Dilemma",
    dragonRiderAcademy: "Dragon Rider Academy",
    mirrorOfTruth: "The Mirror of Truth",
    dreamsOfCollective: "Dreams of the Collective",
    lastLibrary: "The Last Library",
    consciousnessTransfer: "Consciousness Transfer",
    nuclearWinter: "Nuclear Winter",
    prisonBreak: "Prison Break",
    zombieApocalypse: "Zombie Apocalypse",
    economicCollapse: "Economic Collapse",
    healingGarden: "The Healing Garden",
    fosterFamilyBonds: "Foster Family Bonds",
    animalSanctuary: "Animal Sanctuary",
    memoryCare: "Memory Care",
    mysteryManor: "Mystery Manor",
    cyberpunkDreams: "Cyberpunk Dreams",
    fantasyQuest: "Fantasy Quest",
    romanceInParis: "Romance in Paris",
  },
  
  // Profile and settings
  profile: {
    stories: "Stories:",
    profile: "Profile:",
    reset: "Reset",
    resetPreferences: "Reset Preferences",
    resetDescription: "This will clear your personality profile and restart the quiz. Are you sure?",
    cancel: "Cancel",
  },
  
  // Quiz questions
  questions: {
    storyEnding: "How do you prefer stories to end?",
    worldProcessing: "Which word best describes how you process the world?",
    setting: "Choose a setting you'd enjoy reading about:",
    emotionalIntensity: "How do you feel about emotional intensity in stories?",
    language: "What kind of language do you prefer in books?",
  },
  
  // Quiz options
  options: {
    hopeAdventure: "üü° With a sense of hope or adventure",
    ambiguous: "‚ö´ Ambiguous and open to interpretation",
    realistic: "üî¥ Realistic or even tragic, as long as it's honest",
    uplifting: "üü¢ Uplifting and emotionally satisfying",
    wonder: "üåà Wonder",
    reflection: "üîç Reflection",
    survival: "üî• Survival",
    connection: "üíû Connection",
    alienRuins: "üöÄ A crew exploring alien ruins",
    mistyTemple: "‚õ©Ô∏è A lone monk in a misty temple",
    warZone: "üèöÔ∏è A refugee escaping a war zone",
    remoteVillage: "üè° A nurse caring for a remote village",
    someEmotion: "üü¢ Some is good, but I prefer action or ideas",
    deepEmotion: "‚ö´ I want deep emotion, but expressed subtly",
    rawHonesty: "üî¥ Give me raw, painful honesty",
    warmthConnection: "üíó I want warmth, connection, and healing",
    simpleEnergetic: "‚úàÔ∏è Simple, energetic, quick to read",
    richMetaphors: "üåå Rich metaphors and layered prose",
    minimalistPunchy: "ü™® Minimalist, punchy, brutally clear",
    flowingKind: "üçÉ Flowing, kind, and emotionally nuanced",
  },
};

// Supported locales
export const SUPPORTED_LOCALES = {
  en: "English",
  es: "Espa√±ol",
  fr: "Fran√ßais",
  de: "Deutsch",
  it: "Italiano",
  pt: "Portugu√™s",
  ja: "Êó•Êú¨Ë™û",
  ko: "ÌïúÍµ≠Ïñ¥",
  zh: "‰∏≠Êñá",
  ar: "ÿßŸÑÿπÿ±ÿ®Ÿäÿ©",
};

export type Locale = keyof typeof SUPPORTED_LOCALES;

// Localization context type
export interface LocalizationContextType {
  locale: Locale;
  setLocale: (locale: Locale) => void;
  t: (key: string, params?: Record<string, string | number>) => string;
  translateObject: <T extends Record<string, any>>(obj: T) => Promise<T>;
}

// Sample translations for demonstration
const SAMPLE_TRANSLATIONS = {
  es: {
    quiz: {
      title: "üé≠ Tejedor de Historias",
      welcome: "¬°Bienvenido a tu experiencia de historias personalizada!",
      description: "Descubramos tu personalidad de lectura para crear historias que resuenen contigo. Toma un cuestionario r√°pido de 5 preguntas para desbloquear la narraci√≥n personalizada.",
      startQuiz: "Comenzar Cuestionario ‚Üí",
      personalityQuiz: "Cuestionario de Personalidad",
      helpText: "Ay√∫danos a entender tus preferencias de lectura para personalizar tus historias.",
      questionOf: "Pregunta {current} de {total}",
      settingUp: "Configurando...",
      preparing: "Preparando tu experiencia personalizada",
    },
    story: {
      chooseStory: "Elegir una Historia",
      selectStoryline: "Selecciona una historia del panel lateral para comenzar tu aventura",
      startYourOwnStory: "‚ú® Comienza Tu Propia Historia",
      yourStoryIdea: "Tu Idea de Historia",
      describeStory: "Describe tu idea de historia aqu√≠...",
      startStory: "Comenzar Historia",
      clickToBegin: "Haz clic en \"Comenzar Historia\" para empezar",
      emojisOn: "üòä Emojis Activados",
      emojisOff: "üòê Emojis Desactivados",
      continueStory: "Continuar Historia ‚Üí",
      generating: "Generando...",
      previous: "‚Üê Anterior",
      next: "Siguiente ‚Üí",
    },
    navigation: {
      navigation: "Navegaci√≥n",
      progress: "Progreso",
      paragraphOf: "P√°rrafo {current} de {total}",
      whatHappensNext: "¬øQu√© pasa despu√©s?",
      selectOptionContinue: "Selecciona una opci√≥n, luego haz clic en \"Continuar Historia\" para proceder",
    },
    storyStarters: {
      title: "Iniciadores de Historias",
      lostCityAtlantis: "Ciudad Perdida de la Atl√°ntida",
      spaceColonyExodus: "√âxodo de la Colonia Espacial",
      timeTravelerDilemma: "El Dilema del Viajero del Tiempo",
      dragonRiderAcademy: "Academia de Jinete de Dragones",
      mirrorOfTruth: "El Espejo de la Verdad",
      dreamsOfCollective: "Sue√±os del Colectivo",
      lastLibrary: "La √öltima Biblioteca",
      consciousnessTransfer: "Transferencia de Conciencia",
      nuclearWinter: "Invierno Nuclear",
      prisonBreak: "Fuga de Prisi√≥n",
      zombieApocalypse: "Apocalipsis Zombi",
      economicCollapse: "Colapso Econ√≥mico",
      healingGarden: "El Jard√≠n Curativo",
      fosterFamilyBonds: "V√≠nculos de Familia Adoptiva",
      animalSanctuary: "Santuario de Animales",
      memoryCare: "Cuidado de Memoria",
      mysteryManor: "Mansi√≥n Misteriosa",
      cyberpunkDreams: "Sue√±os Cyberpunk",
      fantasyQuest: "B√∫squeda Fant√°stica",
      romanceInParis: "Romance en Par√≠s",
    },
    profile: {
      stories: "Historias:",
      profile: "Perfil:",
      reset: "Reiniciar",
      resetPreferences: "Reiniciar Preferencias",
      resetDescription: "Esto borrar√° tu perfil de personalidad y reiniciar√° el cuestionario. ¬øEst√°s seguro?",
      cancel: "Cancelar",
    },
  },
  fr: {
    quiz: {
      title: "üé≠ Tisseur d'Histoires",
      welcome: "Bienvenue dans votre exp√©rience d'histoires personnalis√©e !",
      description: "D√©couvrons votre personnalit√© de lecture pour cr√©er des histoires qui vous parlent. Passez un quiz rapide de 5 questions pour d√©bloquer la narration personnalis√©e.",
      startQuiz: "Commencer le Quiz ‚Üí",
      personalityQuiz: "Quiz de Personnalit√©",
      helpText: "Aidez-nous √† comprendre vos pr√©f√©rences de lecture pour personnaliser vos histoires.",
      questionOf: "Question {current} sur {total}",
      settingUp: "Configuration en cours...",
      preparing: "Pr√©paration de votre exp√©rience personnalis√©e",
    },
    story: {
      chooseStory: "Choisir une Histoire",
      selectStoryline: "S√©lectionnez une histoire dans la barre lat√©rale pour commencer votre aventure",
      startYourOwnStory: "‚ú® Commencer Votre Propre Histoire",
      yourStoryIdea: "Votre Id√©e d'Histoire",
      describeStory: "D√©crivez votre id√©e d'histoire ici...",
      startStory: "Commencer l'Histoire",
      clickToBegin: "Cliquez sur \"Commencer l'Histoire\" pour commencer",
      emojisOn: "üòä Emojis Activ√©s",
      emojisOff: "üòê Emojis D√©sactiv√©s",
      continueStory: "Continuer l'Histoire ‚Üí",
      generating: "G√©n√©ration...",
      previous: "‚Üê Pr√©c√©dent",
      next: "Suivant ‚Üí",
    },
    navigation: {
      navigation: "Navigation",
      progress: "Progr√®s",
      paragraphOf: "Paragraphe {current} sur {total}",
      whatHappensNext: "Que se passe-t-il ensuite ?",
      selectOptionContinue: "S√©lectionnez une option, puis cliquez sur \"Continuer l'Histoire\" pour continuer",
    },
    storyStarters: {
      title: "D√©marreurs d'Histoires",
      lostCityAtlantis: "Cit√© Perdue d'Atlantis",
      spaceColonyExodus: "Exode de la Colonie Spatiale",
      timeTravelerDilemma: "Le Dilemme du Voyageur Temporel",
      dragonRiderAcademy: "Acad√©mie des Cavaliers de Dragons",
      mirrorOfTruth: "Le Miroir de la V√©rit√©",
      dreamsOfCollective: "R√™ves du Collectif",
      lastLibrary: "La Derni√®re Biblioth√®que",
      consciousnessTransfer: "Transfert de Conscience",
      nuclearWinter: "Hiver Nucl√©aire",
      prisonBreak: "√âvasion de Prison",
      zombieApocalypse: "Apocalypse Zombie",
      economicCollapse: "Effondrement √âconomique",
      healingGarden: "Le Jardin Gu√©risseur",
      fosterFamilyBonds: "Liens de Famille d'Accueil",
      animalSanctuary: "Sanctuaire Animal",
      memoryCare: "Soins de M√©moire",
      mysteryManor: "Manoir Myst√©rieux",
      cyberpunkDreams: "R√™ves Cyberpunk",
      fantasyQuest: "Qu√™te Fantastique",
      romanceInParis: "Romance √† Paris",
    },
    profile: {
      stories: "Histoires:",
      profile: "Profil:",
      reset: "R√©initialiser",
      resetPreferences: "R√©initialiser les Pr√©f√©rences",
      resetDescription: "Cela effacera votre profil de personnalit√© et red√©marrera le quiz. √ätes-vous s√ªr ?",
      cancel: "Annuler",
    },
  },
  de: {
    quiz: {
      title: "üé≠ Geschichtenerz√§hler",
      welcome: "Willkommen bei Ihrer personalisierten Geschichtenerfahrung!",
      description: "Entdecken wir Ihre Lesepers√∂nlichkeit, um Geschichten zu erstellen, die mit Ihnen in Resonanz stehen. Machen Sie einen schnellen 5-Fragen-Quiz, um personalisiertes Storytelling freizuschalten.",
      startQuiz: "Quiz Starten ‚Üí",
      personalityQuiz: "Pers√∂nlichkeitsquiz",
      helpText: "Helfen Sie uns, Ihre Lesepr√§ferenzen zu verstehen, um Ihre Geschichten zu personalisieren.",
      questionOf: "Frage {current} von {total}",
      settingUp: "Einrichtung l√§uft...",
      preparing: "Vorbereitung Ihrer personalisierten Erfahrung",
    },
    story: {
      chooseStory: "Geschichte Ausw√§hlen",
      selectStoryline: "W√§hlen Sie eine Geschichte aus der Seitenleiste, um Ihr Abenteuer zu beginnen",
      startYourOwnStory: "‚ú® Beginnen Sie Ihre Eigene Geschichte",
      yourStoryIdea: "Ihre Geschichtenidee",
      describeStory: "Beschreiben Sie Ihre Geschichtenidee hier...",
      startStory: "Geschichte Starten",
      clickToBegin: "Klicken Sie auf \"Geschichte Starten\" um zu beginnen",
      emojisOn: "üòä Emojis An",
      emojisOff: "üòê Emojis Aus",
      continueStory: "Geschichte Fortsetzen ‚Üí",
      generating: "Generierung...",
      previous: "‚Üê Zur√ºck",
      next: "Weiter ‚Üí",
    },
    navigation: {
      navigation: "Navigation",
      progress: "Fortschritt",
      paragraphOf: "Absatz {current} von {total}",
      whatHappensNext: "Was passiert als n√§chstes?",
      selectOptionContinue: "W√§hlen Sie eine Option, dann klicken Sie auf \"Geschichte Fortsetzen\" um fortzufahren",
    },
    storyStarters: {
      title: "Geschichtenstarter",
      lostCityAtlantis: "Verlorene Stadt Atlantis",
      spaceColonyExodus: "Raumkolonie-Exodus",
      timeTravelerDilemma: "Das Dilemma des Zeitreisenden",
      dragonRiderAcademy: "Drachenreiter-Akademie",
      mirrorOfTruth: "Der Spiegel der Wahrheit",
      dreamsOfCollective: "Tr√§ume des Kollektivs",
      lastLibrary: "Die Letzte Bibliothek",
      consciousnessTransfer: "Bewusstseins√ºbertragung",
      nuclearWinter: "Nuklearer Winter",
      prisonBreak: "Gef√§ngnisausbruch",
      zombieApocalypse: "Zombie-Apokalypse",
      economicCollapse: "Wirtschaftskollaps",
      healingGarden: "Der Heilende Garten",
      fosterFamilyBonds: "Pflegefamilien-Bindungen",
      animalSanctuary: "Tierschutzgebiet",
      memoryCare: "Ged√§chtnispflege",
      mysteryManor: "Geheimnisvolles Herrenhaus",
      cyberpunkDreams: "Cyberpunk-Tr√§ume",
      fantasyQuest: "Fantasy-Quest",
      romanceInParis: "Romance in Paris",
    },
    profile: {
      stories: "Geschichten:",
      profile: "Profil:",
      reset: "Zur√ºcksetzen",
      resetPreferences: "Einstellungen Zur√ºcksetzen",
      resetDescription: "Dies l√∂scht Ihr Pers√∂nlichkeitsprofil und startet das Quiz neu. Sind Sie sicher?",
      cancel: "Abbrechen",
    },
  },
  it: {
    quiz: {
      title: "üé≠ Tessitore di Storie",
      welcome: "Benvenuto nella tua esperienza di storie personalizzata!",
      description: "Scopriamo la tua personalit√† di lettura per creare storie che risuonino con te. Fai un quiz veloce di 5 domande per sbloccare la narrazione personalizzata.",
      startQuiz: "Inizia Quiz ‚Üí",
      personalityQuiz: "Quiz di Personalit√†",
      helpText: "Aiutaci a capire le tue preferenze di lettura per personalizzare le tue storie.",
      questionOf: "Domanda {current} di {total}",
      settingUp: "Configurazione in corso...",
      preparing: "Preparazione della tua esperienza personalizzata",
    },
    story: {
      chooseStory: "Scegli una Storia",
      selectStoryline: "Seleziona una storia dalla barra laterale per iniziare la tua avventura",
      startYourOwnStory: "‚ú® Inizia la Tua Storia",
      yourStoryIdea: "La Tua Idea di Storia",
      describeStory: "Descrivi la tua idea di storia qui...",
      startStory: "Inizia Storia",
      clickToBegin: "Clicca su \"Inizia Storia\" per cominciare",
      emojisOn: "üòä Emoji Attive",
      emojisOff: "üòê Emoji Disattive",
      continueStory: "Continua Storia ‚Üí",
      generating: "Generazione...",
      previous: "‚Üê Precedente",
      next: "Successivo ‚Üí",
    },
    navigation: {
      navigation: "Navigazione",
      progress: "Progresso",
      paragraphOf: "Paragrafo {current} di {total}",
      whatHappensNext: "Cosa succede dopo?",
      selectOptionContinue: "Seleziona un'opzione, poi clicca su \"Continua Storia\" per procedere",
    },
    storyStarters: {
      title: "Iniziatori di Storie",
      lostCityAtlantis: "Citt√† Perduta di Atlantide",
      spaceColonyExodus: "Esodo della Colonia Spaziale",
      timeTravelerDilemma: "Il Dilemma del Viaggiatore nel Tempo",
      dragonRiderAcademy: "Accademia dei Cavalieri di Draghi",
      mirrorOfTruth: "Lo Specchio della Verit√†",
      dreamsOfCollective: "Sogni del Collettivo",
      lastLibrary: "L'Ultima Biblioteca",
      consciousnessTransfer: "Trasferimento di Coscienza",
      nuclearWinter: "Inverno Nucleare",
      prisonBreak: "Fuga di Prigione",
      zombieApocalypse: "Apocalisse Zombie",
      economicCollapse: "Collasso Economico",
      healingGarden: "Il Giardino Curativo",
      fosterFamilyBonds: "Legami di Famiglia Adottiva",
      animalSanctuary: "Santuario degli Animali",
      memoryCare: "Cura della Memoria",
      mysteryManor: "Maniero Misterioso",
      cyberpunkDreams: "Sogni Cyberpunk",
      fantasyQuest: "Ricerca Fantastica",
      romanceInParis: "Romance a Parigi",
    },
    profile: {
      stories: "Storie:",
      profile: "Profilo:",
      reset: "Ripristina",
      resetPreferences: "Ripristina Preferenze",
      resetDescription: "Questo canceller√† il tuo profilo di personalit√† e riavvier√† il quiz. Sei sicuro?",
      cancel: "Annulla",
    },
  },
  zh: {
    quiz: {
      title: "üé≠ ÊïÖ‰∫ãÁºñÁªáËÄÖ",
      welcome: "Ê¨¢ËøéÊù•Âà∞ÊÇ®ÁöÑ‰∏™ÊÄßÂåñÊïÖ‰∫ã‰ΩìÈ™åÔºÅ",
      description: "ËÆ©Êàë‰ª¨ÂèëÁé∞ÊÇ®ÁöÑÈòÖËØª‰∏™ÊÄßÔºåÂàõÈÄ†‰∏éÊÇ®ÂÖ±È∏£ÁöÑÊïÖ‰∫ã„ÄÇÂèÇÂä†‰∏Ä‰∏™Âø´ÈÄüÁöÑ5ÈóÆÈ¢òÊµãÈ™åÊù•Ëß£ÈîÅ‰∏™ÊÄßÂåñËÆ≤ÊïÖ‰∫ã„ÄÇ",
      startQuiz: "ÂºÄÂßãÊµãÈ™å ‚Üí",
      personalityQuiz: "‰∏™ÊÄßÊµãÈ™å",
      helpText: "Â∏ÆÂä©Êàë‰ª¨‰∫ÜËß£ÊÇ®ÁöÑÈòÖËØªÂÅèÂ•ΩÊù•‰∏™ÊÄßÂåñÊÇ®ÁöÑÊïÖ‰∫ã„ÄÇ",
      questionOf: "Á¨¨ {current} È¢òÔºåÂÖ± {total} È¢ò",
      settingUp: "Ê≠£Âú®ËÆæÁΩÆ...",
      preparing: "ÂáÜÂ§áÊÇ®ÁöÑ‰∏™ÊÄßÂåñ‰ΩìÈ™å",
    },
    story: {
      chooseStory: "ÈÄâÊã©‰∏Ä‰∏™ÊïÖ‰∫ã",
      selectStoryline: "‰ªé‰æßËæπÊ†èÈÄâÊã©‰∏Ä‰∏™ÊïÖ‰∫ãÊÉÖËäÇÂºÄÂßãÊÇ®ÁöÑÂÜíÈô©",
      startYourOwnStory: "‚ú® ÂºÄÂßãÊÇ®Ëá™Â∑±ÁöÑÊïÖ‰∫ã",
      yourStoryIdea: "ÊÇ®ÁöÑÊïÖ‰∫ãÊÉ≥Ê≥ï",
      describeStory: "Âú®Ê≠§ÊèèËø∞ÊÇ®ÁöÑÊïÖ‰∫ãÊÉ≥Ê≥ï...",
      startStory: "ÂºÄÂßãÊïÖ‰∫ã",
      clickToBegin: "ÁÇπÂáª\"ÂºÄÂßãÊïÖ‰∫ã\"ÂºÄÂßã",
      emojisOn: "üòä Ë°®ÊÉÖÁ¨¶Âè∑ÂºÄÂêØ",
      emojisOff: "üòê Ë°®ÊÉÖÁ¨¶Âè∑ÂÖ≥Èó≠",
      continueStory: "ÁªßÁª≠ÊïÖ‰∫ã ‚Üí",
      generating: "ÁîüÊàê‰∏≠...",
      previous: "‚Üê ‰∏ä‰∏Ä‰∏™",
      next: "‰∏ã‰∏Ä‰∏™ ‚Üí",
    },
    navigation: {
      navigation: "ÂØºËà™",
      progress: "ËøõÂ∫¶",
      paragraphOf: "Á¨¨ {current} ÊÆµÔºåÂÖ± {total} ÊÆµ",
      whatHappensNext: "Êé•‰∏ãÊù•‰ºöÂèëÁîü‰ªÄ‰πàÔºü",
      selectOptionContinue: "ÈÄâÊã©‰∏Ä‰∏™ÈÄâÈ°πÔºåÁÑ∂ÂêéÁÇπÂáª\"ÁªßÁª≠ÊïÖ‰∫ã\"ÁªßÁª≠",
    },
    storyStarters: {
      title: "ÊïÖ‰∫ãÂêØÂä®Âô®",
      lostCityAtlantis: "Â§±ËêΩÁöÑ‰∫öÁâπÂÖ∞ËíÇÊñØÂüé",
      spaceColonyExodus: "Â§™Á©∫ÊÆñÊ∞ëÂú∞Âá∫ÂüÉÂèäËÆ∞",
      timeTravelerDilemma: "Êó∂Èó¥ÊóÖË°åËÄÖÁöÑÂõ∞Â¢É",
      dragonRiderAcademy: "ÈæôÈ™ëÂ£´Â≠¶Èô¢",
      mirrorOfTruth: "ÁúüÁêÜ‰πãÈïú",
      dreamsOfCollective: "ÈõÜ‰ΩìÁöÑÊ¢¶ÊÉ≥",
      lastLibrary: "ÊúÄÂêéÁöÑÂõæ‰π¶È¶Ü",
      consciousnessTransfer: "ÊÑèËØÜËΩ¨Áßª",
      nuclearWinter: "Ê†∏ÂÜ¨Â§©",
      prisonBreak: "Ë∂äÁã±",
      zombieApocalypse: "ÂÉµÂ∞∏ÂêØÁ§∫ÂΩï",
      economicCollapse: "ÁªèÊµéÂ¥©Ê∫É",
      healingGarden: "Ê≤ªÊÑàËä±Âõ≠",
      fosterFamilyBonds: "ÂØÑÂÖªÂÆ∂Â∫≠Á∫ΩÂ∏¶",
      animalSanctuary: "Âä®Áâ©‰øùÊä§Âå∫",
      memoryCare: "ËÆ∞ÂøÜÊä§ÁêÜ",
      mysteryManor: "Á•ûÁßòÂ∫ÑÂõ≠",
      cyberpunkDreams: "ËµõÂçöÊúãÂÖã‰πãÊ¢¶",
      fantasyQuest: "Â•áÂπªÂÜíÈô©",
      romanceInParis: "Â∑¥ÈªéÊµ™Êº´",
    },
    profile: {
      stories: "ÊïÖ‰∫ã:",
      profile: "Ê°£Ê°à:",
      reset: "ÈáçÁΩÆ",
      resetPreferences: "ÈáçÁΩÆÂÅèÂ•Ω",
      resetDescription: "ËøôÂ∞ÜÊ∏ÖÈô§ÊÇ®ÁöÑ‰∏™ÊÄßÊ°£Ê°àÂπ∂ÈáçÊñ∞ÂºÄÂßãÊµãÈ™å„ÄÇÊÇ®Á°ÆÂÆöÂêóÔºü",
      cancel: "ÂèñÊ∂à",
    },
  },
  ja: {
    quiz: {
      title: "üé≠ „Çπ„Éà„Éº„É™„Éº„ÉÜ„É©„Éº",
      welcome: "„Éë„Éº„ÇΩ„Éä„É©„Ç§„Ç∫„Åï„Çå„Åü„Çπ„Éà„Éº„É™„Éº‰ΩìÈ®ì„Å∏„Çà„ÅÜ„Åì„ÅùÔºÅ",
      description: "„ÅÇ„Å™„Åü„ÅÆË™≠Êõ∏ÊÄßÊ†º„ÇíÁô∫Ë¶ã„Åó„Å¶„ÄÅ„ÅÇ„Å™„Åü„Å®ÂÖ±È≥¥„Åô„Çã„Çπ„Éà„Éº„É™„Éº„Çí‰Ωú„Çä„Åæ„Åó„Çá„ÅÜ„ÄÇ5„Å§„ÅÆË≥™Âïè„ÅÆ„ÇØ„Ç§„Ç∫„ÇíÂèó„Åë„Å¶„ÄÅ„Éë„Éº„ÇΩ„Éä„É©„Ç§„Ç∫„Åï„Çå„Åü„Çπ„Éà„Éº„É™„Éº„ÉÜ„É™„É≥„Ç∞„Çí„Ç¢„É≥„É≠„ÉÉ„ÇØ„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ",
      startQuiz: "„ÇØ„Ç§„Ç∫„ÇíÈñãÂßã ‚Üí",
      personalityQuiz: "ÊÄßÊ†º„ÇØ„Ç§„Ç∫",
      helpText: "„ÅÇ„Å™„Åü„ÅÆË™≠Êõ∏Â•Ω„Åø„ÇíÁêÜËß£„Åó„Å¶„ÄÅ„ÅÇ„Å™„Åü„ÅÆ„Çπ„Éà„Éº„É™„Éº„Çí„Éë„Éº„ÇΩ„Éä„É©„Ç§„Ç∫„Åô„Çã„ÅÆ„ÇíÊâã‰ºù„Å£„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ",
      questionOf: "Ë≥™Âïè {current} / {total}",
      settingUp: "„Çª„ÉÉ„Éà„Ç¢„ÉÉ„Éó‰∏≠...",
      preparing: "„ÅÇ„Å™„Åü„ÅÆ„Éë„Éº„ÇΩ„Éä„É©„Ç§„Ç∫„Åï„Çå„Åü‰ΩìÈ®ì„ÇíÊ∫ñÂÇô‰∏≠",
    },
    story: {
      chooseStory: "„Çπ„Éà„Éº„É™„Éº„ÇíÈÅ∏Êäû",
      selectStoryline: "„Çµ„Ç§„Éâ„Éê„Éº„Åã„Çâ„Çπ„Éà„Éº„É™„Éº„É©„Ç§„É≥„ÇíÈÅ∏Êäû„Åó„Å¶ÂÜíÈô∫„ÇíÂßã„ÇÅ„Åæ„Åó„Çá„ÅÜ",
      startYourOwnStory: "‚ú® „ÅÇ„Å™„ÅüËá™Ë∫´„ÅÆ„Çπ„Éà„Éº„É™„Éº„ÇíÂßã„ÇÅ„Çã",
      yourStoryIdea: "„ÅÇ„Å™„Åü„ÅÆ„Çπ„Éà„Éº„É™„Éº„Ç¢„Ç§„Éá„Ç¢",
      describeStory: "„Åì„Åì„Åß„ÅÇ„Å™„Åü„ÅÆ„Çπ„Éà„Éº„É™„Éº„Ç¢„Ç§„Éá„Ç¢„ÇíË™¨Êòé„Åó„Å¶„Åè„Å†„Åï„ÅÑ...",
      startStory: "„Çπ„Éà„Éº„É™„Éº„ÇíÈñãÂßã",
      clickToBegin: "\"„Çπ„Éà„Éº„É™„Éº„ÇíÈñãÂßã\"„Çí„ÇØ„É™„ÉÉ„ÇØ„Åó„Å¶Âßã„ÇÅ„Çã",
      emojisOn: "üòä ÁµµÊñáÂ≠ó„Ç™„É≥",
      emojisOff: "üòê ÁµµÊñáÂ≠ó„Ç™„Éï",
      continueStory: "„Çπ„Éà„Éº„É™„Éº„ÇíÁ∂ö„Åë„Çã ‚Üí",
      generating: "ÁîüÊàê‰∏≠...",
      previous: "‚Üê Ââç„Å∏",
      next: "Ê¨°„Å∏ ‚Üí",
    },
    navigation: {
      navigation: "„Éä„Éì„Ç≤„Éº„Ç∑„Éß„É≥",
      progress: "ÈÄ≤Êçó",
      paragraphOf: "ÊÆµËêΩ {current} / {total}",
      whatHappensNext: "Ê¨°„Å´‰Ωï„ÅåËµ∑„Åì„ÇãÔºü",
      selectOptionContinue: "„Ç™„Éó„Ç∑„Éß„É≥„ÇíÈÅ∏Êäû„Åó„Å¶„Åã„Çâ\"„Çπ„Éà„Éº„É™„Éº„ÇíÁ∂ö„Åë„Çã\"„Çí„ÇØ„É™„ÉÉ„ÇØ„Åó„Å¶Á∂öË°å",
    },
    storyStarters: {
      title: "„Çπ„Éà„Éº„É™„Éº„Çπ„Çø„Éº„Çø„Éº",
      lostCityAtlantis: "Â§±„Çè„Çå„Åü„Ç¢„Éà„É©„É≥„ÉÜ„Ç£„Çπ",
      spaceColonyExodus: "ÂÆáÂÆô„Ç≥„É≠„Éã„Éº„ÅÆÂá∫„Ç®„Ç∏„Éó„ÉàË®ò",
      timeTravelerDilemma: "„Çø„Ç§„É†„Éà„É©„Éô„É©„Éº„ÅÆ„Ç∏„É¨„É≥„Éû",
      dragonRiderAcademy: "„Éâ„É©„Ç¥„É≥„É©„Ç§„ÉÄ„Éº„Ç¢„Ç´„Éá„Éü„Éº",
      mirrorOfTruth: "ÁúüÂÆü„ÅÆÈè°",
      dreamsOfCollective: "ÈõÜÂõ£„ÅÆÂ§¢",
      lastLibrary: "ÊúÄÂæå„ÅÆÂõ≥Êõ∏È§®",
      consciousnessTransfer: "ÊÑèË≠òËª¢ÈÄÅ",
      nuclearWinter: "Ê†∏„ÅÆÂÜ¨",
      prisonBreak: "ËÑ±ÁçÑ",
      zombieApocalypse: "„Çæ„É≥„ÉìÈªôÁ§∫Èå≤",
      economicCollapse: "ÁµåÊ∏àÂ¥©Â£ä",
      healingGarden: "Áôí„Åó„ÅÆÂ∫≠",
      fosterFamilyBonds: "ÈáåË¶™ÂÆ∂Êóè„ÅÆÁµÜ",
      animalSanctuary: "ÂãïÁâ©‰øùË≠∑Âå∫",
      memoryCare: "Ë®òÊÜ∂„Ç±„Ç¢",
      mysteryManor: "Ë¨é„ÅÆÂ±ãÊï∑",
      cyberpunkDreams: "„Çµ„Ç§„Éê„Éº„Éë„É≥„ÇØ„ÅÆÂ§¢",
      fantasyQuest: "„Éï„Ç°„É≥„Çø„Ç∏„Éº„ÇØ„Ç®„Çπ„Éà",
      romanceInParis: "„Éë„É™„ÅÆ„É≠„Éû„É≥„Çπ",
    },
    profile: {
      stories: "„Çπ„Éà„Éº„É™„Éº:",
      profile: "„Éó„É≠„Éï„Ç£„Éº„É´:",
      reset: "„É™„Çª„ÉÉ„Éà",
      resetPreferences: "Ë®≠ÂÆö„Çí„É™„Çª„ÉÉ„Éà",
      resetDescription: "„Åì„Çå„Å´„Çà„Çä„ÅÇ„Å™„Åü„ÅÆÊÄßÊ†º„Éó„É≠„Éï„Ç£„Éº„É´„Åå„ÇØ„É™„Ç¢„Åï„Çå„ÄÅ„ÇØ„Ç§„Ç∫„ÅåÂÜçÈñã„Åï„Çå„Åæ„Åô„ÄÇ„Çà„Çç„Åó„ÅÑ„Åß„Åô„ÅãÔºü",
      cancel: "„Ç≠„É£„É≥„Çª„É´",
    },
  },
  ko: {
    quiz: {
      title: "üé≠ Ïä§ÌÜ†Î¶¨ÌÖîÎü¨",
      welcome: "Í∞úÏù∏ÌôîÎêú Ïä§ÌÜ†Î¶¨ Í≤ΩÌóòÏóê Ïò§Ïã† Í≤ÉÏùÑ ÌôòÏòÅÌï©ÎãàÎã§!",
      description: "ÎãπÏã†Ïùò ÎèÖÏÑú ÏÑ±Í≤©ÏùÑ Î∞úÍ≤¨ÌïòÏó¨ ÎãπÏã†Í≥º Í≥µÍ∞êÌïòÎäî Ïä§ÌÜ†Î¶¨Î•º ÎßåÎì§Ïñ¥Î¥ÖÏãúÎã§. Îπ†Î•∏ 5Î¨∏Ï†ú ÌÄ¥Ï¶àÎ•º ÌÜµÌï¥ Í∞úÏù∏ÌôîÎêú Ïä§ÌÜ†Î¶¨ÌÖîÎßÅÏùÑ Ìï¥Ï†úÌïòÏÑ∏Ïöî.",
      startQuiz: "ÌÄ¥Ï¶à ÏãúÏûë ‚Üí",
      personalityQuiz: "ÏÑ±Í≤© ÌÄ¥Ï¶à",
      helpText: "ÎãπÏã†Ïùò ÎèÖÏÑú ÏÑ†Ìò∏ÎèÑÎ•º Ïù¥Ìï¥ÌïòÏó¨ ÎãπÏã†Ïùò Ïä§ÌÜ†Î¶¨Î•º Í∞úÏù∏ÌôîÌïòÎäî Îç∞ ÎèÑÏõÄÏùÑ Ï£ºÏÑ∏Ïöî.",
      questionOf: "ÏßàÎ¨∏ {current} / {total}",
      settingUp: "ÏÑ§Ï†ï Ï§ë...",
      preparing: "ÎãπÏã†Ïùò Í∞úÏù∏ÌôîÎêú Í≤ΩÌóòÏùÑ Ï§ÄÎπÑ Ï§ë",
    },
    story: {
      chooseStory: "Ïä§ÌÜ†Î¶¨ ÏÑ†ÌÉù",
      selectStoryline: "ÏÇ¨Ïù¥ÎìúÎ∞îÏóêÏÑú Ïä§ÌÜ†Î¶¨ÎùºÏù∏ÏùÑ ÏÑ†ÌÉùÌïòÏó¨ Î™®ÌóòÏùÑ ÏãúÏûëÌïòÏÑ∏Ïöî",
      startYourOwnStory: "‚ú® ÎãπÏã†ÎßåÏùò Ïä§ÌÜ†Î¶¨ ÏãúÏûëÌïòÍ∏∞",
      yourStoryIdea: "ÎãπÏã†Ïùò Ïä§ÌÜ†Î¶¨ ÏïÑÏù¥ÎîîÏñ¥",
      describeStory: "Ïó¨Í∏∞ÏÑú ÎãπÏã†Ïùò Ïä§ÌÜ†Î¶¨ ÏïÑÏù¥ÎîîÏñ¥Î•º ÏÑ§Î™ÖÌïòÏÑ∏Ïöî...",
      startStory: "Ïä§ÌÜ†Î¶¨ ÏãúÏûë",
      clickToBegin: "\"Ïä§ÌÜ†Î¶¨ ÏãúÏûë\"ÏùÑ ÌÅ¥Î¶≠ÌïòÏó¨ ÏãúÏûë",
      emojisOn: "üòä Ïù¥Î™®ÏßÄ ÏºúÍ∏∞",
      emojisOff: "üòê Ïù¥Î™®ÏßÄ ÎÅÑÍ∏∞",
      continueStory: "Ïä§ÌÜ†Î¶¨ Í≥ÑÏÜçÌïòÍ∏∞ ‚Üí",
      generating: "ÏÉùÏÑ± Ï§ë...",
      previous: "‚Üê Ïù¥Ï†Ñ",
      next: "Îã§Ïùå ‚Üí",
    },
    navigation: {
      navigation: "ÎÑ§ÎπÑÍ≤åÏù¥ÏÖò",
      progress: "ÏßÑÌñâÎ•†",
      paragraphOf: "Îã®ÎùΩ {current} / {total}",
      whatHappensNext: "Îã§ÏùåÏóê Î¨¥Ïä® ÏùºÏù¥ ÏùºÏñ¥ÎÇ†ÍπåÏöî?",
      selectOptionContinue: "ÏòµÏÖòÏùÑ ÏÑ†ÌÉùÌïú ÌõÑ \"Ïä§ÌÜ†Î¶¨ Í≥ÑÏÜçÌïòÍ∏∞\"Î•º ÌÅ¥Î¶≠ÌïòÏó¨ ÏßÑÌñâ",
    },
    storyStarters: {
      title: "Ïä§ÌÜ†Î¶¨ Ïä§ÌÉÄÌÑ∞",
      lostCityAtlantis: "ÏûÉÏñ¥Î≤ÑÎ¶∞ ÏïÑÌãÄÎûÄÌã∞Ïä§",
      spaceColonyExodus: "Ïö∞Ï£º ÏãùÎØºÏßÄ Ï∂úÏï†ÍµΩÍ∏∞",
      timeTravelerDilemma: "ÏãúÍ∞Ñ Ïó¨ÌñâÏûêÏùò ÎîúÎ†àÎßà",
      dragonRiderAcademy: "ÎìúÎûòÍ≥§ ÎùºÏù¥Îçî ÏïÑÏπ¥Îç∞ÎØ∏",
      mirrorOfTruth: "ÏßÑÏã§Ïùò Í±∞Ïö∏",
      dreamsOfCollective: "ÏßëÎã®Ïùò Íøà",
      lastLibrary: "ÎßàÏßÄÎßâ ÎèÑÏÑúÍ¥Ä",
      consciousnessTransfer: "ÏùòÏãù Ï†ÑÏÜ°",
      nuclearWinter: "ÌïµÍ≤®Ïö∏",
      prisonBreak: "ÌÉàÏò•",
      zombieApocalypse: "Ï¢ÄÎπÑ ÏïÑÌè¨ÏπºÎ¶ΩÏä§",
      economicCollapse: "Í≤ΩÏ†ú Î∂ïÍ¥¥",
      healingGarden: "ÏπòÏú†Ïùò Ï†ïÏõê",
      fosterFamilyBonds: "ÏúÑÌÉÅ Í∞ÄÏ°±Ïùò Ïú†ÎåÄ",
      animalSanctuary: "ÎèôÎ¨º Î≥¥Ìò∏ÏÜå",
      memoryCare: "Í∏∞Ïñµ ÏºÄÏñ¥",
      mysteryManor: "ÎØ∏Ïä§ÌÑ∞Î¶¨ Ï†ÄÌÉù",
      cyberpunkDreams: "ÏÇ¨Ïù¥Î≤ÑÌéëÌÅ¨Ïùò Íøà",
      fantasyQuest: "ÌåêÌÉÄÏßÄ ÌÄòÏä§Ìä∏",
      romanceInParis: "ÌååÎ¶¨Ïùò Î°úÎß®Ïä§",
    },
    profile: {
      stories: "Ïä§ÌÜ†Î¶¨:",
      profile: "ÌîÑÎ°úÌïÑ:",
      reset: "Ïû¨ÏÑ§Ï†ï",
      resetPreferences: "ÏÑ§Ï†ï Ïû¨ÏÑ§Ï†ï",
      resetDescription: "Ïù¥Í≤ÉÏùÄ ÎãπÏã†Ïùò ÏÑ±Í≤© ÌîÑÎ°úÌïÑÏùÑ ÏßÄÏö∞Í≥† ÌÄ¥Ï¶àÎ•º Îã§Ïãú ÏãúÏûëÌï©ÎãàÎã§. ÌôïÏã§Ìï©ÎãàÍπå?",
      cancel: "Ï∑®ÏÜå",
    },
  },
};

// Cache for translated content
const translationCache = new Map<string, any>();

// Main localization function
export async function localizeContent(
  content: Record<string, any>,
  targetLocale: Locale,
  sourceLocale: Locale = "en"
): Promise<Record<string, any>> {
  if (targetLocale === sourceLocale) {
    return content;
  }

  const cacheKey = `${sourceLocale}-${targetLocale}-${JSON.stringify(content)}`;
  
  if (translationCache.has(cacheKey)) {
    return translationCache.get(cacheKey);
  }

  try {
    // Use the API route instead of direct SDK
    const response = await fetch('/api/translate', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        content,
        sourceLocale,
        targetLocale
      })
    });

    if (!response.ok) {
      throw new Error('Translation API failed');
    }

    const { translated } = await response.json();
    translationCache.set(cacheKey, translated);
    return translated;
  } catch (error) {
    console.error("Translation error:", error);
    return content; // Fallback to original content
  }
}

// Utility function to translate a specific key
export function translateKey(
  key: string,
  locale: Locale,
  params?: Record<string, string | number>
): string {
  // For now, return the English version
  // In a full implementation, this would use the cached translations
  let text = key;
  
  if (params) {
    Object.entries(params).forEach(([key, value]) => {
      text = text.replace(`{${key}}`, String(value));
    });
  }
  
  return text;
}

// Hook for React components
export function useLocalization() {
  const [locale, setLocale] = useState<Locale>("en");
  const [translations, setTranslations] = useState<Record<string, any>>(LOCALIZATION_CONTENT);

  useEffect(() => {
    if (locale === "en") {
      setTranslations(LOCALIZATION_CONTENT);
    } else if (SAMPLE_TRANSLATIONS[locale as keyof typeof SAMPLE_TRANSLATIONS]) {
      // Use sample translations for supported languages
      setTranslations(SAMPLE_TRANSLATIONS[locale as keyof typeof SAMPLE_TRANSLATIONS]);
    } else {
      // For unsupported languages, fall back to English gracefully
      console.warn(`Translation not available for locale: ${locale}, falling back to English`);
      setTranslations(LOCALIZATION_CONTENT);
    }
  }, [locale]);

  const t = useCallback((key: string, params?: Record<string, string | number>) => {
    const keys = key.split('.');
    let value = translations;
    
    for (const k of keys) {
      value = value?.[k];
      if (value === undefined) return key;
    }
    
    let text = String(value);
    
    if (params) {
      Object.entries(params).forEach(([key, value]) => {
        text = text.replace(`{${key}}`, String(value));
      });
    }
    
    return text;
  }, [translations]);

  const translateObject = useCallback(async <T extends Record<string, any>>(obj: T): Promise<T> => {
    if (locale === "en") return obj;
    const translated = await localizeContent(obj, locale);
    return translated as T;
  }, [locale]);

  return {
    locale,
    setLocale,
    t,
    translateObject,
  };
}

// Import React hooks
import { useState, useEffect, useCallback } from "react"; 